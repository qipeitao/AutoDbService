<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using JetBrains.Annotations;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;

namespace Microsoft.EntityFrameworkCore
{
    public static partial class EF
    {
        /// <summary>
        ///     Creates a compiled query delegate that when invoked will execute the specified LINQ query.
        /// </summary>
        /// <typeparam name="TContext">The target DbContext type.</typeparam>
        /// <typeparam name="TResult">The query result type.</typeparam>
        /// <param name="queryExpression">The LINQ query expression.</param>
        /// <returns>A delegate that can be invoked to execute the compiled query.</returns>
        public static Func<TContext, IEnumerable<TResult>> CompileQuery<TContext, TResult>(
            [NotNull] Expression<Func<TContext, DbSet<TResult>>> queryExpression)
            where TContext : DbContext
            where TResult : class
            => new CompiledQuery<TContext, IEnumerable<TResult>>(queryExpression).Execute;
<#
    var ordinal = new[] { "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth" };

    var maxParameters = 15;

    for (var parameterCount = 0; parameterCount <= maxParameters; parameterCount++)
    {
        var paramsList = string.Join("", Enumerable.Range(1, parameterCount).Select(e => "TParam" + e + ", "));
#>

        /// <summary>
        ///     Creates a compiled query delegate that when invoked will execute the specified LINQ query.
        /// </summary>
        /// <typeparam name="TContext">The target DbContext type.</typeparam>
<# for (var i = 1; i <= parameterCount; i++) { #>
        /// <typeparam name="TParam<#= i #>">The type of the <#= ordinal[i - 1] #> query parameter.</typeparam>
<# } #>
        /// <typeparam name="TResult">The query result type.</typeparam>
        /// <typeparam name="TProperty">The included property type.</typeparam>
        /// <param name="queryExpression">The LINQ query expression.</param>
        /// <returns>A delegate that can be invoked to execute the compiled query.</returns>
<# if (parameterCount <= 2 ) { #>
        public static Func<TContext, <#= paramsList #>IEnumerable<TResult>> CompileQuery<TContext, <#= paramsList #>TResult, TProperty>(
<# } else { #>
        public static Func<TContext, <#= paramsList #>IEnumerable<TResult>> CompileQuery<
            TContext, <#= paramsList #>TResult, TProperty>(
<# } #>
            [NotNull] Expression<Func<TContext, <#= paramsList #>IIncludableQueryable<TResult, TProperty>>> queryExpression)
            where TContext : DbContext
            => new CompiledQuery<TContext, IEnumerable<TResult>>(queryExpression).Execute;

        /// <summary>
        ///     Creates a compiled query delegate that when invoked will execute the specified LINQ query.
        /// </summary>
        /// <typeparam name="TContext">The target DbContext type.</typeparam>
<# for (var i = 1; i <= parameterCount; i++) { #>
        /// <typeparam name="TParam<#= i #>">The type of the <#= ordinal[i - 1] #> query parameter.</typeparam>
<# } #>
        /// <typeparam name="TResult">The query result type.</typeparam>
        /// <param name="queryExpression">The LINQ query expression.</param>
        /// <returns>A delegate that can be invoked to execute the compiled query.</returns>
<# if (parameterCount <= 2 ) { #>
        public static Func<TContext, <#= paramsList #>IEnumerable<TResult>> CompileQuery<TContext, <#= paramsList #>TResult>(
<# } else { #>
        public static Func<TContext, <#= paramsList #>IEnumerable<TResult>> CompileQuery<
            TContext, <#= paramsList #>TResult>(
<# } #>
            [NotNull] Expression<Func<TContext, <#= paramsList #>IQueryable<TResult>>> queryExpression)
            where TContext : DbContext
            => new CompiledQuery<TContext, IEnumerable<TResult>>(queryExpression).Execute;

        /// <summary>
        ///     Creates a compiled query delegate that when invoked will execute the specified LINQ query.
        /// </summary>
        /// <typeparam name="TContext">The target DbContext type.</typeparam>
<# for (var i = 1; i <= parameterCount; i++) { #>
        /// <typeparam name="TParam<#= i #>">The type of the <#= ordinal[i - 1] #> query parameter.</typeparam>
<# } #>
        /// <typeparam name="TResult">The query result type.</typeparam>
        /// <param name="queryExpression">The LINQ query expression.</param>
        /// <returns>A delegate that can be invoked to execute the compiled query.</returns>
<# if (parameterCount <= 3 ) { #>
        public static Func<TContext, <#= paramsList #>TResult> CompileQuery<TContext, <#= paramsList #>TResult>(
<# } else { #>
        public static Func<TContext, <#= paramsList #>TResult> CompileQuery<
            TContext, <#= paramsList #>TResult>(
<# } #>
            [NotNull] Expression<Func<TContext, <#= paramsList #>TResult>> queryExpression)
            where TContext : DbContext
            => new CompiledQuery<TContext, TResult>(queryExpression).Execute;
<#
     }
#>
    }
}
